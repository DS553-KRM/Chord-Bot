# .github/workflows/main.yml
name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:

jobs:
  unit-tests:
    name: Unit tests (pytest on Python 3.10)
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.10-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.10-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e .
          fi
          pip install pytest

      - name: Run pytest
        run: |
          mkdir -p reports
          pytest -q --maxfail=1 --disable-warnings --junitxml=reports/junit.xml

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: reports/junit.xml

  spaces-smoke:
    name: Spaces-like smoke check (CPU-only import & tiny call)
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.10-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.10-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e .
          fi

      - name: (Optional) Check Hugging Face auth
        if: ${{ secrets.HF_TOKEN }}
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          python - <<'PY'
          import os, sys, json
          token = os.environ.get("HF_TOKEN")
          try:
              from huggingface_hub import HfApi
          except ImportError:
              import subprocess
              subprocess.check_call([sys.executable, "-m", "pip", "install", "huggingface_hub"])
              from huggingface_hub import HfApi
          try:
              who = HfApi().whoami(token=token)
              print("HF whoami:", json.dumps(who))
          except Exception as e:
              print("HF check skipped or failed softly:", e)
          PY

      - name: Smoke import & tiny call
        run: |
          python - <<'PY'
          import importlib, sys, pathlib, inspect

          project_root = pathlib.Path(__file__).resolve().parents[2]
          sys.path.insert(0, str(project_root))
          sys.path.insert(0, str(project_root / "src"))

          candidates = []
          if (project_root / "app.py").exists():
              candidates.append("app")
          if (project_root / "src" / "app.py").exists():
              candidates.append("app")
          if not candidates:
              candidates = ["app"]

          last_err = None
          module = None
          for name in candidates:
              try:
                  module = importlib.import_module(name)
                  break
              except Exception as e:
                  last_err = e

          assert module is not None, f"Could not import app module: {last_err}"

          PREFERRED = ("ping", "healthcheck", "health_check", "hello", "version", "get_version")
          FALLBACK  = ("predict", "inference", "run", "main", "chord_bot")

          def try_call(fn):
              try:
                  sig = inspect.signature(fn)
                  if len(sig.parameters) == 0:
                      fn()
                      return True
                  if len(sig.parameters) == 1:
                      fn("test")
                      return True
              except Exception:
                  return False
              return False

          called = False
          for name in list(PREFERRED) + list(FALLBACK):
              if hasattr(module, name) and callable(getattr(module, name)):
                  if try_call(getattr(module, name)):
                      called = True
                      break

          print("Smoke import OK. Callable executed:", called)
          PY
