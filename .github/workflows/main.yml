# .github/workflows/main.yml
name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:

jobs:
  unit-tests:
    name: Unit tests (pytest on Python 3.10)
    runs-on: ubuntu-latest

    steps:
      # 1) Check out repository
      - name: Check out code
        uses: actions/checkout@v4

      # 2) Set up Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # 3) Cache pip dependencies to speed up builds
      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.10-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.10-
            ${{ runner.os }}-pip-

      # 4) Install project dependencies (and the package itself if present)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Editable install if a Python package is defined
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e .
          fi
          # Ensure pytest is available even if not listed
          pip install pytest

      # 5) Run tests and emit a JUnit XML report for CI visibility
      - name: Run pytest
        run: |
          mkdir -p reports
          pytest -q --maxfail=1 --disable-warnings --junitxml=reports/junit.xml

      # 6) Upload the JUnit report as a build artifact
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: reports/junit.xml

  spaces-smoke:
    name: Spaces-like smoke check (CPU-only import & tiny call)
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      # 1) Check out repository
      - name: Check out code
        uses: actions/checkout@v4

      # 2) Set up Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # 3) Cache pip dependencies
      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.10-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.10-
            ${{ runner.os }}-pip-

      # 4) Install same dependencies as Spaces CPU runtime (no GPU backends)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e .
          fi

      # 5) (Optional) Use HF token if provided; handle presence inside the script (no 'if:' on secrets)
      - name: (Optional) Check Hugging Face auth
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          if [ -z "${HF_TOKEN:-}" ]; then
            echo "No HF token provided. Skipping HF auth check."
            exit 0
          fi
          python - <<'PY'
          import os, sys, json
          try:
              from huggingface_hub import HfApi
          except Exception:
              import subprocess
              subprocess.check_call([sys.executable, "-m", "pip", "install", "huggingface_hub"])
              from huggingface_hub import HfApi
          try:
              who = HfApi().whoami(token=os.environ["HF_TOKEN"])
              print("HF whoami:", json.dumps(who))
          except Exception as e:
              print("HF check failed softly:", e)
          PY

      # 6) Prepare a stub model so app import doesn't try to train
      - name: Prepare stub model so import doesnâ€™t train
        run: |
          python - <<'PY'
          import os
          MODEL_PATH = "chord_classifier.pkl"
          if not os.path.exists(MODEL_PATH):
              # Try joblib; fall back to pickle. joblib.load can read pickle files.
              try:
                  import joblib
                  class _StubModel:
                      def predict(self, X):
                          return ["C major"] * len(X)
                  joblib.dump(_StubModel(), MODEL_PATH)
                  print("Wrote stub model via joblib:", MODEL_PATH)
              except Exception as e:
                  print("joblib not available or failed:", e, "-- falling back to pickle")
                  import pickle
                  class _StubModel:
                      def predict(self, X):
                          return ["C major"] * len(X)
                  with open(MODEL_PATH, "wb") as f:
                      pickle.dump(_StubModel(), f)
                  print("Wrote stub model via pickle:", MODEL_PATH)
          else:
              print("Model already present:", MODEL_PATH)
          PY

      # 7) Spaces-like "smoke" import: import app and call a tiny function
      - name: Smoke import & tiny call
        run: |
          python - <<'PY'
          import importlib
          m = importlib.import_module("app")
          # Call your two-arg function with a tiny input
          out = m.chord_bot("C E G", [])
          print("Smoke output:", out)
          PY
